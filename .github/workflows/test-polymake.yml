name: Run polymake testsuite

on:
  push:
    branches:
      - master
      - testing/**
    tags: '*'
  pull_request:

concurrency:
  # group by workflow and ref; the last slightly strange component ensures that for pull
  # requests, we limit to 1 concurrent job, but for the master branch we don't
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref != 'refs/heads/master' || github.run_number }}
  # Cancel intermediate builds, but only if it is a pull request build.
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test-polymake:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.julia-version == 'nightly' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        julia-version: ['~1.6.0-0', 'nightly']
        libcxxwrap: [ '' ]
        include:
          - os: ubuntu-latest
            julia-version: '~1.7.0-0'
          - os: macOS-11.0
            julia-version: '~1.7.0-0'

      fail-fast: true

    steps:
      - uses: actions/checkout@v2.1.0
      - name: Cache artifacts
        uses: actions/cache@v2
        env:
          cache-name: cache-artifacts
        with:
          path: |
            ~/.julia/artifacts
            !~/.julia/artifacts/Overrides.toml
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
      - name: "pin libcxxwrap_julia"
        run: julia --project=test/project -e 'using Pkg;
                                              Pkg.instantiate();
                                              Pkg.add("libcxxwrap_julia_jll${{ matrix.libcxxwrap }}");
                                              Pkg.pin("libcxxwrap_julia_jll");'
      - name: "Build and set override"
        run: |
          julia --project=test/project test-prepare.jl --override --build --ignore-compat
      - name: "Work around glibcxx issue"
        if: matrix.os == 'ubuntu-20.04'
        run: echo "LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6" >> $GITHUB_ENV
      - name: "Test polymake"
        env:
           TERM: linux
        run: julia --project=test/project -e 'using libpolymake_julia_jll;
                                              using libpolymake_julia_jll.polymake_jll;
                                              using polymake_jll.Perl_jll;
                                              perl() do perl
                                                polymake() do polymake
                                                  run(`$perl $polymake --iscript test/run_testcases --emacs-style`);
                                                end
                                              end'
