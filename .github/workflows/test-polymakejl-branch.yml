name: Run Polymake.jl testsuite for pull request branch / master

on:
  push:
    branches:
      - master
      - testing/**
    tags: '*'
  pull_request:

jobs:
  test-polymakejl-branch:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.julia-version == 'nightly' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        julia-version: ['1.5', '~1.6.0-0', 'nightly']
        libcxxwrap: [ '' ]
        include:
          - os: ubuntu-latest
            julia-version: '~1.7.0-0'
          - os: macOS-11.0
            julia-version: '~1.7.0-0'
          - os: macOS-latest
            julia-version: 1.4
          - libcxxwrap: '@0.7'
            os: ubuntu-18.04
            julia-version: 1.5
          - os: ubuntu-20.04
            julia-version: 1.5

      fail-fast: true

    steps:
      - uses: actions/checkout@v2.1.0
      - name: Cache artifacts
        uses: actions/cache@v2
        env:
          cache-name: cache-artifacts
        with:
          path: |
            ~/.julia/artifacts
            !~/.julia/artifacts/Overrides.toml
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
      - name: "set xcode 11.3.1"
        if: matrix.os == 'macOS-latest'
        # until https://github.com/llvm/llvm-project/commit/2464d8135e arrives in xcode ...
        # developers affected by this will need to build libcxxwrap-julia manually as well
        run: echo "DEVELOPER_DIR=/Applications/Xcode_11.3.1.app/Contents/Developer" >> $GITHUB_ENV
      - name: "pin libcxxwrap_julia"
        run: julia --project=. -e 'using Pkg;
                                   Pkg.instantiate();
                                   pkg"pin libcxxwrap_julia_jll${{ matrix.libcxxwrap }}";'
      - name: "Build and set override"
        run: |
          julia --project=. test-prepare.jl --override --build
      - name: "Look for Polymake.jl branch in fork"
        if: github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name && github.event.pull_request.head.ref != 'master'
        id: detectbranchfork
        # look for a branch with the same name (!= master) in the corresponding fork for Polymake.jl
        continue-on-error: true
        run: julia --project=. -e 'using Pkg;
                                   Pkg.add(PackageSpec(url="https://github.com/${{ github.event.pull_request.head.repo.owner.login }}/Polymake.jl",rev="${{ github.event.pull_request.head.ref }}"));'
      - name: "Look for Polymake.jl branch in main"
        if: steps.detectbranchfork.outcome != 'success'
        id: detectbranch
        # look for a branch with the same name for Polymake.jl
        continue-on-error: true
        run: julia --project=. -e 'using Pkg;
                                   Pkg.add(PackageSpec(name="Polymake",rev="${{ github.event.pull_request.head.ref }}"));'
      - name: "Test Polymake.jl master"
        # use master otherwise
        if: steps.detectbranch.outcome != 'success' && steps.detectbranchfork.outcome != 'success'
        run: julia --project=. -e 'using Pkg;
                                   Pkg.add(PackageSpec(name="Polymake",rev="master"));'
      - name: "Work around glibcxx issue"
        if: matrix.os == 'ubuntu-20.04'
        run: echo "LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6" >> $GITHUB_ENV
      - name: "Test Polymake.jl branch"
        run: julia --project=. -e 'using Pkg;
                                   Pkg.test("Polymake");'
